// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GARBLEDCIRCUITMESSAGE_ENCRYPTO_MOTION_COMMUNICATION_H_
#define FLATBUFFERS_GENERATED_GARBLEDCIRCUITMESSAGE_ENCRYPTO_MOTION_COMMUNICATION_H_

#include "flatbuffers/flatbuffers.h"

namespace encrypto {
namespace motion {
namespace communication {

struct GarbledCircuitSetupMessage;
struct GarbledCircuitSetupMessageBuilder;

struct GarbledCircuitSetupMessage FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef GarbledCircuitSetupMessageBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_AES_KEY = 4,
    VT_HASH_KEY = 6
  };
  const flatbuffers::Vector<uint8_t> *aes_key() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_AES_KEY);
  }
  const flatbuffers::Vector<uint8_t> *hash_key() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_HASH_KEY);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_AES_KEY) &&
           verifier.VerifyVector(aes_key()) &&
           VerifyOffset(verifier, VT_HASH_KEY) &&
           verifier.VerifyVector(hash_key()) &&
           verifier.EndTable();
  }
};

struct GarbledCircuitSetupMessageBuilder {
  typedef GarbledCircuitSetupMessage Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_aes_key(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> aes_key) {
    fbb_.AddOffset(GarbledCircuitSetupMessage::VT_AES_KEY, aes_key);
  }
  void add_hash_key(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> hash_key) {
    fbb_.AddOffset(GarbledCircuitSetupMessage::VT_HASH_KEY, hash_key);
  }
  explicit GarbledCircuitSetupMessageBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<GarbledCircuitSetupMessage> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<GarbledCircuitSetupMessage>(end);
    return o;
  }
};

inline flatbuffers::Offset<GarbledCircuitSetupMessage> CreateGarbledCircuitSetupMessage(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> aes_key = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> hash_key = 0) {
  GarbledCircuitSetupMessageBuilder builder_(_fbb);
  builder_.add_hash_key(hash_key);
  builder_.add_aes_key(aes_key);
  return builder_.Finish();
}

inline flatbuffers::Offset<GarbledCircuitSetupMessage> CreateGarbledCircuitSetupMessageDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *aes_key = nullptr,
    const std::vector<uint8_t> *hash_key = nullptr) {
  auto aes_key__ = aes_key ? _fbb.CreateVector<uint8_t>(*aes_key) : 0;
  auto hash_key__ = hash_key ? _fbb.CreateVector<uint8_t>(*hash_key) : 0;
  return encrypto::motion::communication::CreateGarbledCircuitSetupMessage(
      _fbb,
      aes_key__,
      hash_key__);
}

}  // namespace communication
}  // namespace motion
}  // namespace encrypto

#endif  // FLATBUFFERS_GENERATED_GARBLEDCIRCUITMESSAGE_ENCRYPTO_MOTION_COMMUNICATION_H_
